[[security-server]]
Securing access to the Neo4j Server
===================================

Per default, the Neo4j Server is bundled with a Jetty instance that binds to host +localhost+ on port +7474+, answering only requests from the local machine. 

If you need to enable access from external machines, configure Jetty in the +conf/neo4j-server.properties+ by setting the related properties, e.g for access by any host, do

[IMPORTANT]
The neo4j server exposes remote scripting functionality by default that allow full access to the underlying system. 
Exposing your server without an added security layer (see below) poses a severe security threat.

[source]
----
# http port (for all data, administrative, and UI access)
org.neo4j.server.webserver.port=7474

#let the webserver only listen on the specified IP. Default
#is localhost (only accept local connections). Uncomment to allow
#any connection.
#org.neo4j.server.webserver.address=0.0.0.0
----

== HTTPS support ==

The Neo4j server includes built in support for SSL encrypted communication using HTTPS. 
The first time the server starts, it automatically generates a self-signed ssl certificate and a private key.
Because the certificate is self signed, it is not safe to rely on for production use, instead, you should provide your own key and certificate for the server to use.

To provide your own key and certificate, replace the generated key and certificate, or change the neo4j-server.properties file to set the location of your certififacate and key:

[source]
----
# Certificate location (auto generated if the file does not exist)
org.neo4j.server.webserver.https.cert.location=ssl/snakeoil.cert

# Private key location (auto generated if the file does not exist)
org.neo4j.server.webserver.https.key.location=ssl/snakeoil.key
----

Note that the key should be unencrypted. 
The server does not support password-protected keys, since the password would be stored in clear text on the same file system either way.
Make sure you set correct permissions to the private key, so that only the neo4j server user can read/write it.

You can set what port the https connector should bind to in the same configuration file, as well as turn https off:

[source]
----
# Turn https-support on/off
org.neo4j.server.webserver.https.enabled=true

# https port (for all data, administrative, and UI access)
org.neo4j.server.webserver.https.port=443
----

== Authentication / authorization ==

The Neo4j server currently does not enforce security on the REST access layer.
This should be taken care of by external means.
We strongly recommend to front a running Neo4j Server with a proxy like Apache `mod_proxy` footnote:[http://httpd.apache.org/docs/2.2/mod/mod_proxy.html].
This provides a number of advantages:

* Control access to the Neo4j server to specific IP addresses, URL patterns and IP ranges. This can be used to make for instance only the +/db/data+ namespace accessible to non-local clients, while the +/db/admin+ URLs only respond to a specific IP address.
+
[source]
---------------
<Proxy *>
  Order Deny,Allow
  Deny from all
  Allow from 192.168.0
</Proxy>
---------------

* Run Neo4j Server as a non-root user on a Linux/Unix system on a port < 1000 (e.g. port 80) using 
+
[source]
---------------
ProxyPass /neo4jdb/data http://localhost:7474/db/data
ProxyPassReverse /neo4jdb/data http://localhost:7474/db/data
---------------

* Simple load balancing in a clustered environment to load-balance read load using the Apache `mod_proxy_balancer` footnote:[http://httpd.apache.org/docs/2.2/mod/mod_proxy_balancer.html] plugin
+
[source]
--------------
<Proxy balancer://mycluster>
BalancerMember http://192.168.1.50:80
BalancerMember http://192.168.1.51:80
</Proxy>
ProxyPass /test balancer://mycluster
--------------

