[[rest-api]]
REST API
========

The Neo4j REST API is designed with discoverability in mind, so that you can start with a +GET+ on the <<rest-api-service-root>> and from there discover URIs to perform other requests.
The examples below uses URIs in the examples; they are subject to change in the future, so for future-proofness _discover URIs where possible_, instead of relying on the current layout.
The default representation is http://www.json.org/[json], both for responses and for data sent with +POST+/+PUT+ requests.

Below follows a listing of ways to interact with the REST API.
You can also see a (at runtime) generated description of the API be pointing your  browser to the (exact URI may vary) http://localhost:7474/db/data/application.wadl

To interact with the JSON interface you must explicitly set the request header +Accept:application/json+ for those requests that responds with data.
You should also set the header +Content-Type:application/json+ if your request sends data, for example when you're creating a relationship.
The examples include the relevant request and response headers.

[[rest-api-service-root]]
== Service root ==

include::get-service-root.txt[]

[[rest-api-nodes]]
== Nodes ==

include::create-a-node.txt[]

include::create-node-with-properties.txt[]

include::get-node.txt[]

include::get-non-existent-node.txt[]

include::delete-node.txt[]

include::nodes-with-relationships-can-not-be-deleted.txt[]

[[rest-api-relationships]]
== Relationships ==

The general pattern to get relationships is:
[source]
GET http://localhost:7474/db/data/node/123/relationships/{dir}/{-list|&|types}

Where +dir+ is one of +all+, +in+, +out+ and +types+ is an ampersand-separated list of types.
See the examples below for more information.

include::create-relationship.txt[]

include::get-all-relationships.txt[]

include::get-incoming-relationships.txt[]

include::get-outgoing-relationships.txt[]

include::get-typed-relationships.txt[]

include::get-relationships-on-a-node-without-relationships.txt[]

[[rest-api-relationship-types]]
== Relationship types ==

include::get-relationship-types.txt[]

[[rest-api-node-properties]]
== Node properties ==

include::set-property-on-node.txt[]

include::update-node-properties.txt[]

include::get-properties-for-node.txt[]

include::get-properties-for-node-(empty-result).txt[]

include::property-values-can-not-be-null.txt[]

include::property-values-can-not-be-nested.txt[]

include::delete-all-properties-from-node.txt[]

[[rest-api-relationship-properties]]
== Relationship properties ==

include::update-relationship-properties.txt[]

[[rest-api-indexes]]
== Indexes ==

An index can contain either nodes or relationships.

NOTE: To create an index with default configuration, simply start using it by adding nodes/relationships to it. It will then be automatically created for you.

What default configuration means depends on how you have configured your database.
If you haven't changed any indexing configuration, it means the indexes will be using a Lucene-based backend.

If you want to customize the index settings, see <<rest-api-create-node-index-with-configuration>>.

include::create-node-index.txt[]

include::create-node-index-with-configuration.txt[]

include::delete-node-index.txt[]

include::list-node-indexes.txt[]

include::list-node-indexes-(empty-result).txt[]

include::add-node-to-index.txt[]

include::find-node-by-exact-match.txt[]


