[[rest-api]]
REST API
========

include::introduction.txt[]

[[rest-api-service-root]]
== Service root ==

include::get-service-root.txt[]

[[rest-api-nodes]]
== Nodes ==

include::create-node.txt[]

include::create-node-with-properties.txt[]

include::get-node.txt[]

include::get-non-existent-node.txt[]

include::delete-node.txt[]

include::nodes-with-relationships-can-not-be-deleted.txt[]

[[rest-api-relationships]]
== Relationships ==

The general pattern to get relationships is:
[source]
GET http://localhost:7474/db/data/node/123/relationships/{dir}/{-list|&|types}

Where +dir+ is one of +all+, +in+, +out+ and +types+ is an ampersand-separated list of types.
See the examples below for more information.

include::create-relationship.txt[]

include::get-all-relationships.txt[]

include::get-incoming-relationships.txt[]

include::get-outgoing-relationships.txt[]

include::get-typed-relationships.txt[]

include::get-relationships-on-a-node-without-relationships.txt[]

[[rest-api-relationship-types]]
== Relationship types ==

include::get-relationship-types.txt[]

[[rest-api-node-properties]]
== Node properties ==

include::set-property-on-node.txt[]

include::update-node-properties.txt[]

include::get-properties-for-node.txt[]

include::get-properties-for-node-(empty-result).txt[]

include::property-values-can-not-be-null.txt[]

include::property-values-can-not-be-nested.txt[]

include::delete-all-properties-from-node.txt[]

[[rest-api-relationship-properties]]
== Relationship properties ==

include::update-relationship-properties.txt[]

[[rest-api-indexes]]
== Indexes ==

An index can contain either nodes or relationships.

NOTE: To create an index with default configuration, simply start using it by adding nodes/relationships to it. It will then be automatically created for you.

What default configuration means depends on how you have configured your database.
If you haven't changed any indexing configuration, it means the indexes will be using a Lucene-based backend.

All the examples below show you how to do operations on node indexes, but all of them are just as applicable
to relationship indexes. Simple change the "node" part of the URL to "relationship".

If you want to customize the index settings, see <<rest-api-create-node-index-with-configuration>>.

include::create-node-index.txt[]

include::create-node-index-with-configuration.txt[]

include::delete-node-index.txt[]

include::list-node-indexes.txt[]

include::list-node-indexes-(empty-result).txt[]

include::add-node-to-index.txt[]

include::remove-all-entries-with-a-given-node-from-an-index.txt[]

include::remove-all-entries-with-a-given-node-and-key-from-an-index.txt[]

include::remove-all-entries-with-a-given-node,-key-and-value-from-an-index.txt[]

include::find-node-by-exact-match.txt[]

include::find-node-by-exact-match-from-an-automatic-index.txt[]

include::find-node-by-query.txt[]

include::find-node-by-query-from-an-automatic-index.txt[]

[[rest-api-traverse]]
== Traversals ==

include::traversals.txt[]

include::traversal-using-a-return-filter.txt[]

include::creating-a-paged-traverser.txt[]

include::paging-through-the-results-of-a-paged-traverser.txt[]

include::paged-traverser-page-size.txt[]

include::paged-traverser-timeout.txt[]

[[rest-api-graph-algos]]
== Built-in Graph Algorithms ==

include::graph_algos.txt[]

include::find-all-shortest-paths.txt[]

include::find-one-of-the-shortest-paths-between-nodes.txt[]

include::execute-a-dijkstra-algorithm-with-similar-weights-on-relationships.txt[]

include::execute-a-dijkstra-algorithm-with-weights-on-relationships.txt[]


[[rest-api-batch-ops]]
== Batch operations ==

CAUTION: Batch support is currently _experimental_. Expect this part of the API to change.

include::execute-multiple-operations-in-batch.txt[]

include::refer-to-items-created-earlier-in-the-same-batch-job.txt[]

